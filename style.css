/* --- NEW: Basic setup for full-screen layout --- */
html {
    height: 100%;
    /* Smoothly scales font size between a min, a viewport-based value, and a max */
    font-size: clamp(10px, 2.2vmin, 14px);
}
h1 {
    font-family: 'Limelight', cursive;
   /* font-size: clamp(30px, 4.0vmin, 40px);*/
}
body {
    font-family: 'Inter', sans-serif;
    touch-action: manipulation;
    height: 100%;
    margin: 0;
    overflow: hidden; /* Prevents scrollbars */
    background-color: #18181b; /* bg-zinc-900 */
    color: white;
    display: flex; /* Center the game container */
    justify-content: center;
    align-items: center;
}

/* --- NEW: Main game container layout --- */
#game-container {
    display: flex;
    flex-direction: column; /* Stack children vertically */
    width: 100%;
    height: 100%;
    max-width: 500px; /* Max width on large screens */
    padding: 1rem;
    box-sizing: border-box; /* Include padding in height/width calculation */
}

/* --- MODIFIED: Grid container now grows to fill space --- */
.grid-container {
    flex-grow: 1; /* This is the magic! It makes the grid fill available space. */
    min-height: 0; /* A flexbox trick to prevent overflow issues */
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.75rem; /* 12px */
    width: 100%;
    margin: auto;
    perspective: 1000px;
}

/* --- NEW: Container for buttons at the bottom --- */
.controls-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
}


/* --- UNCHANGED: All other styles remain the same --- */

.grid-item {
    display: flex; /* Change to flex for easier overlay */
    justify-content: center;
    align-items: center;
    text-align: center;
    font-weight: 600;
    text-transform: uppercase;
    cursor: pointer;
    border-radius: 0.5rem; /* 8px */
    aspect-ratio: 3 / 4;
    transition: transform 0.2s ease, background-color 0.2s ease, color 0.2s ease;
    user-select: none;
    position: relative; /* Important for positioning children */
    overflow: hidden; /* Hide overflowing parts of the image */
    background-color: rgba(41, 37, 36, 0.7); /* Slightly darker, semi-transparent default */
}

.grid-item.has-image {
    background-color: transparent; /* Remove background if image covers it */
}

.tile-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover; /* Cover the entire tile, cropping if necessary */
    opacity: 0.3; /* Make the image slightly transparent so text is readable */
    transition: opacity 0.2s ease;
}

.grid-item.selected .tile-image {
    opacity: 0.1; /* Even more transparent when selected */
}

.tile-text {
    position: relative; /* Ensure text stays on top */
    z-index: 1; /* Place text above the image */
    color: white; /* Ensure text color is visible */
    padding: 0.5rem; /* Add some padding around the text */
    text-shadow: 1px 1px 3px rgba(0,0,0,0.6); /* Add shadow for better readability */
}

.grid-item.selected {
    /* Keep the original color for selected state, but make it slightly transparent */
    background-color: rgba(90, 90, 90, 0.7) !important; /* Semi-transparent overlay */
    color: white !important;
    transform: scale(0.95);
    outline: 2px solid white; /* Add a white outline for visibility */
}

.solved-group {
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 0.75rem;
    text-align: center;
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    animation: fadeIn forwards 0.5s ease-out;
    width: 100%;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
}

@keyframes fadeIn {
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.message-toast {
    position: fixed;
    bottom: 20%;
    left: 50%;
    transform: translateX(-50%) translateY(100px);
    opacity: 0;
    transition: all 0.3s ease-in-out;
    padding: 0.75rem 1.5rem;
    border-radius: 9999px;
    font-weight: 500;
    color: white;
    z-index: 50;
    pointer-events: none;
}

.message-toast.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    50% { transform: translateX(5px); }
    75% { transform: translateX(-5px); }
}

.shake {
    animation: shake 0.4s ease-in-out;
}

.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.6s;
    transform-style: preserve-3d;
}

.card.flipped .card-inner {
    transform: rotateY(180deg);
}

.card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

.card-back {
    transform: rotateY(180deg);
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 100;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
}

.modal-overlay.show {
    opacity: 1;
    pointer-events: auto;
}

.modal-content {
    background: #2d2d2d;
    padding: 2rem;
    border-radius: 1rem;
    max-width: 500px;
    width: 90%;
    text-align: center;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.show .modal-content {
    transform: scale(1);
}